################################################################################
# COMMON
################################################################################

# [HTTP] The local configuration.
http.local.address = "localhost"
http.local.port = "9000"
http.local.url = ${http.local.address}":"${http.local.port}

# [HTTP] The remote configuration.
# @note The parameters should be passed as system properties (e.g. -Dhttp.address='...' -Dhttp.port='...').
http.address = "178.195.21.79"
http.port = "9000"
http.url = ${http.address}":"${http.port}


################################################################################
# FRAMEWORKS / LIBRARIES
################################################################################

# [PLAY] The application secret that is used for a number of things, including:
# - signing session cookies and CSRF tokens and
# - built in encryption utilities.
# @note The key should be passed as a system property (e.g. -Dplay.http.secret.key='...').
play.http.secret.key = "=pI6jx:r79k1zGvq/ZCE=jbPAIzMGOSPy=ttQ:Fz=^SEa8OfSq;UR5U]a@7E/jl:"

# [PLAY] Connect to localhost:9000 for content security policy on WebSockets
# @see https://www.playframework.com/documentation/latest/SecurityHeaders
play.filters.headers {
	# Resource directives:
	# - base-uri:     restricts the URLs that can appear in a page’s <base> element
	# - child-src:    lists the URLs for workers and embedded frame contents
	# - connect-src:  limits the origins to which you can connect (via XHR, WebSockets, and EventSource)
	# - font-src:     specifies the origins that can serve web fonts
	# - form-action:  lists valid endpoints for submission from <form> tags
	# - img-src:      defines the origins from which images can be loaded
	# - media-src:    restricts the origins allowed to deliver video and audio
	# - object-src:   allows control over Flash and other plugins
	# - plugin-types: limits the kinds of plugins a page may invoke
	# - report-uri:   specifies a URL where a browser will send reports when a content security policy is violated
	# - style-src:    is script-src’s counterpart for stylesheets
	# @see https://www.html5rocks.com/en/tutorials/security/content-security-policy/
	contentSecurityPolicy = "connect-src 'self' ws://localhost:9000 ws://"${http.url}
}

# [PLAY] Allow requests to localhost:9000.
# @see https://www.playframework.com/documentation/latest/AllowedHostsFilter
play.filters.hosts {
	allowed = ["localhost:9000", ${http.url}]
}

################################################################################

# [AKKA] Set up logging.
akka {
	loggers = ["akka.event.slf4j.Slf4jLogger"]
	loglevel = "DEBUG"
	logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
	actor {
		debug {
			#receive = on
			#autoreceive = on
			#lifecycle = on
		}
	}
}


################################################################################
# APPLICATION
################################################################################

# [GRAPH] The number of points to be displayed in a graph
graph.size = 576 # 576 points

################################################################################

# The default financial instruments to be tracked
finance.security.set = ["AAPL", "AMZN", "GOOG", "IBM", "MSFT"] # "AGRS"

# The financial data API
# @note Retrieve the security quotes.
# @see https://www.alphavantage.co/documentation/#digital-currency

# The date format and timezone
finance.api.date.format = "yyyy-MM-dd" # "yyyy-MM-dd HH:mm:ss"
finance.api.date.zone = "UTC"
# The starting date counted by subtracting the number of milliseconds from the current date
finance.api.from.date = 8640000000 # [ms] (432000000 => -5 days)
# The refreshing time
finance.api.refresh.time = 300000 # [ms]

# The parameters
# @note The key should be passed as a system property (e.g. -Dfinance.api.in.key='...').
finance.api.in.key = "B5KAXPF4BQM9MURG"
finance.api.in.function = "TIME_SERIES_DAILY" # "TIME_SERIES_INTRADAY"
finance.api.in.interval = "60min"
finance.api.in.market = "USD"
# The URL
finance.api.url = "https://www.alphavantage.co/query?apikey="${finance.api.in.key}"&function="${finance.api.in.function}"&interval="${finance.api.in.interval}"&market="${finance.api.in.market}"&symbol=%s"

# The output labels (column names)
# - The main sections
finance.api.out.error = "Error Message"
finance.api.out.header = "Meta Data"
finance.api.out.data = "Time Series (Daily)"
# - The quote information
finance.api.out.open = "1. open"
finance.api.out.high = "2. high"
finance.api.out.low = "3. low"
finance.api.out.close = "4. close"
finance.api.out.volume = "5. volume"

################################################################################

# The Twitter search proxy API
# @note Use a key-less Twitter search proxy which fails or hangs for about 10% of requests.
# @see https://github.com/jamesward/twitter-search-proxy

# The URL
tweet.api.url = "http://twitter-search-proxy.herokuapp.com/search/tweets?q=%%24%s"

################################################################################

# The sentiment analysis API
# @note Analyze the sentiment of some text.
# @see http://text-processing.com/docs/sentiment.html

# The URL
sentiment.api.url = "http://text-processing.com/api/sentiment/"
